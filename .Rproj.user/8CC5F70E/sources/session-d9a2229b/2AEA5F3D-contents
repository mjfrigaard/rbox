---
title: "`box` examples"
output:
    github_document:
        toc: true
        toc_depth: 4
knit: (function(inputFile, encoding) {
      out_dir <- "../";
      rmarkdown::render(inputFile,
                        encoding=encoding,
                        output_dir=file.path(dirname(inputFile), out_dir))})
always_allow_html: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE, 
  collapse = TRUE,
  comment = "#")
options(width = 60)
library(cli)
library(sloop)
library(fs)
library(kableExtra)
```

Package is loaded using [`pak`](https://pak.r-lib.org/), which checks for installation, and then loads with `pak::pkg_install()`.

```{r pak-inst, eval=FALSE, message=FALSE}
if (!requireNamespace('pak')) {
    install.packages('pak', repos = 'https://r-lib.github.io/p/pak/dev/')
}
pak::pkg_install('klmr/box@dev')
```

# `box` examples

The examples are in the directories below

```{r tree-examples, echo=FALSE, comment=""}
fs::dir_tree(".", type = "dir", recurse = FALSE)
```
## Composing `box` modules

Below are some examples from the [`box` package website](https://klmr.me/box/index.html#loading-code) for including packages and functions.

```{r box_use_df, eval=TRUE, echo=FALSE}
box_use_df <- data.frame(
  check.names = FALSE,
  `Inside box::use()` = c(
    "package", "pkg = package",
    "package = package[foo, bar]", "package[my_foo = foo, ...]"
  ),
  Action = c(
    "imports 'package', does not attach any function names",
    "imports 'package' with alias ('pkg'), does not attach any function names",
    "imports 'package' and attaches the function names 'package::foo()' and 'package::bar()'",
    "imports 'package' with alias ('my_foo') for 'foo' and attaches all exported function names"
  )
)
knitr::kable(box_use_df, format = "pipe")
```

## `penguins`

Below I'm going to create a module that imports, wrangles, and visualizes data from the [palmerpenguins package.](https://allisonhorst.github.io/palmerpenguins/) (**which is installed, but not loaded**).

### `import`

I'll start with a simple `import` module from the `penguins` directory. The code below is stored in `penguins/import.R`:

```{r import-penguins, eval=FALSE}
# penguins/import.R

box::use(
  readr[read_csv],
)

#' @export
import <- function() {
  raw_csv_url <- "https://bit.ly/3SQJ6E3"
  read_csv(raw_csv_url)
}
```

Load and use the module:

```{r load-use-import}
# load import module
box::use(
  penguins/import
)
# use import
import$import()
```

This is loading the raw penguins data from the url.

### `read` (with alias `get_csv`)

I'll create a new module in `penguins/` using an alias for `readr`s `read_csv()` function (`get_csv`) and include the `readr::cols()` function to remove the lengthy message. 

This code is stored in the `penguins/read.R` file:

```{r import-penguins-alias, eval=FALSE}
# penguins/read.R

box::use(
  readr[get_csv = read_csv, cols]
)

#' @export
raw <- function() {
  raw_csv_url <- "https://bit.ly/3SQJ6E3"
  # use alias for read_csv()
  get_csv(raw_csv_url, col_types = cols())
}
```

Load and use `read`

```{r import-read}
# load import module
box::use(
  penguins/read
)
# use import
raw_peng <- read$raw() 
raw_peng |> head()
```

This is a much nicer output (and less to type!)

### `clean`

After importing the raw penguins data, I'll write a module for wrangling the data (that also imports the `read`` module). 

This module takes the following steps:

-   reset the `box.path`   
-   import the `penguins/read` module   
-   load the necessary functions from `dplyr`, `stringr`, and `janitor`   
-   compose `prep()` with wrangling steps  

```{r wrangle-module, eval=FALSE}
# penguins/clean.R

# reset the path
options(box.path = getwd())

# import alias import module
box::use(
  penguins/read
)

# import wrangle pkgs/funs/aliases
box::use(
  dplyr[...],
  stringr[str_ext = str_extract],
  janitor[fix_cols = clean_names]
)

# wrangle data
prep = function() {
  raw <- read$raw()
  clean_cols <- fix_cols(raw)
  vars <- select(clean_cols, 
    species, 
    island, 
    bill_length_mm = culmen_length_mm,
    bill_depth_mm = culmen_depth_mm,
    flipper_length_mm,
    body_mass_g,
    sex)
  mutate(vars, 
    species = str_ext(species, "([[:alpha:]]+)"),
    sex = factor(sex))
}
```

Load and use:

```{r use-clean-prep}
# load clean module
box::use(
  penguins/clean
)
clean$prep() |> str()
```

These data look like they're ready for graphing! Time to write another module...

### `ggp2`

I will build my visualization with `ggplot2` (in the `penguins/ggp2.R` module) and `dplyr::filter()`:

```{r module-viz, eval=FALSE}
# penguins/ggp2.R

# reset the path
options(box.path = getwd())

# import clean module
box::use(
  penguins/clean
)

# import ggplot2
box::use(
  dplyr[filter],
  ggplot2 = ggplot2[ggplot, aes, geom_point, facet_wrap, labs, theme_minimal]
)

#' @export
scatter <- function() {
  prepped <- clean$prep()
  # remove missing sex
  filtered <- filter(prepped, !is.na(sex)) |> 
  plotted <- ggplot2$ggplot(data = filtered, 
    ggplot2$aes(
      x = flipper_length_mm,
      y = body_mass_g,
      group = sex
    )
  ) +
    ggplot2$geom_point(
      ggplot2$aes(color = island)
    ) +
    ggplot2$facet_wrap(. ~ sex) +
    ggplot2$labs(
      x = "Flipper Length (mm)", y = "Body Mass (g)", color = "Island",
      title = "Flipper vs. Body Mass", subtitle = "Palmer Penguins"
    ) +
    ggplot2$theme_minimal()
  plotted
}
```

load the `penguins/ggp2` module

```{r use-ggp2}
box::use(
  penguins/ggp2
)
ggp2
```

Check our scatter plot with `ggp2$scatter()`

```{r use-scatter, eval=FALSE}
ggp2$scatter()
```

![](https://raw.githubusercontent.com/mjfrigaard/rbox/main/boxes/scatter-out.png)

And there you have it! A complete pipeline using `box` modules. Next I'll explore using `penguins/__init__.R`


## `init`

What does `__init__.R` do? Let's check the `c/` modules to investigate:

```{r c-dir, echo=FALSE, comment=""}
fs::dir_tree("c")
```

The `c/__init__.R` file is displayed below: 

```{r c-init, eval=FALSE}
libname = function(name) {
    box::file(paste0(name, .Platform$dynlib.ext))
}

.on_load = function(ns) {
    ns$dll = dyn.load(libname('hello'))
}

.on_unload = function(ns) {
    dyn.unload(libname('hello'))
}

#' @export
hello_world = function(name) {
    .Call(dll$hello_world, name)
}

```


<!--

## `hello`

The following module in `hello/hello.R`:

```{r hello-module, eval=FALSE}
#' @export
hello = function (name) {
    message('Hello, ', name, '!')
}

#' @export
bye = function (name) {
    message('Goodbye ', name, '!')
}
```

To use this module, we can use `box::use()` and refer to the path (unquoted)

```{r box-use}
box::use(hello/hello_world)
hello_world
```

The functions are visible with `names()`

```{r names-hello_world}
names(hello_world)
```

To use the `hello()` and `bye()` functions in `box/hello_world.R`, we can use **`R script$function()`**:

```{r use-box-fun}
hello_world$hello('Martin')
hello_world$bye('Martin')
```


## `bio/`

We'll run through the example from the [Get Started vignette](https://klmr.me/box/articles/box.html) (stored in `box/bio/`)

```{r bio-str, echo=FALSE}
fs::dir_tree("bio/")
```

To use this `box` module, we can run `box::use()` and pass the path to the script file containing the `box` functions

```{r}
box::use(bio/seq)
seq
```

*What is in `seq`?* 

We can use `ls(seq)`

```{r}
ls(seq)
```

Accessing the help from `revcomp()`

```{r help-revcomp}
box::help(seq$revcomp)
```

Using `seq()` in `seq`

```{r use-seq-seq}
s = seq$seq(
    gene1 = 'GATTACAGATCAGCTCAGCACCTAGCACTATCAGCAAC',
    gene2 = 'CATAGCAACTGACATCACAGCG'
)
s
```

```{r is_valid-s}
seq$is_valid(s)
```

```{r revcomp}
getS3method('print', 'bio/seq')
```

## Appendix

The `box/bio/seq.r` file contains the box module.

```{r seq-r-lines, echo=FALSE, comment=" "}
readr::read_lines("bio/seq.r") |> writeLines()
```

-->