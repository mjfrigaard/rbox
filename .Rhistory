fs::dir_create("example")
fs::file_create("example/hello.R")
box::use(example/hello_world)
pak::pkg_install('klmr/box@dev')
box::use(example/hello)
example$hello('Martin')
example$hello('Martin')
fs::dir_create("example")
fs::file_create("example/hello.R")
example$hello('Martin')
box::use(example/hello)
ls()
fs::dir_create("example")
fs::file_create("example/hello_world.R")
box::use(example/hello)
box::use(example/hello)
box::use(example/hello_world)
ls()
box::use(example/hello_world)
ls()
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#> ")
options(width = 60)
library(tidyverse)
library(stringr)
pak::pkg_install('klmr/box@dev')
fs::dir_create("example")
fs::file_create("example/hello_world.R")
box::use(example/hello_world)
ls()
hello_world$hello('Ross')
hello_world$hello('Martin')
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#> ")
options(width = 60)
library(tidyverse)
library(stringr)
library(cli)
box::use(example/hello_world)
ls()
fs::dir_tree('box-pkg/box-main/inst')
fs::dir_tree('.')
fs::dir_tree("box-pkg/box-main/", recurse = FALSE)
searchpaths()
search()
# what does search() do?
search()
.GlobalEnv
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#> ")
options(width = 60)
library(tidyverse)
library(stringr)
library(cli)
fs::dir_tree('pkg/box-main/vignettes/', recurse = TRUE)
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#")
options(width = 60)
library(cli)
library(sloop)
library(fs)
library(kableExtra)
ggp2$scatter()
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#")
options(width = 60)
library(cli)
library(sloop)
library(fs)
library(kableExtra)
fs::dir_tree(".", recurse = FALSE)
box::use(hello/hello_world)
hello_world
names(hello_world)
hello_world$hello('Martin')
hello_world$bye('Martin')
box_use_df <- data.frame(
check.names = FALSE,
`Inside box::use()` = c(
"package", "pkg = package",
"package = package[foo, bar]", "package[my_foo = foo, ...]"
),
Action = c(
"imports 'package', does not attach any function names",
"imports 'package' with alias ('pkg'), does not attach any function names",
"imports 'package' and attaches the function names 'package::foo()' and 'package::bar()'",
"imports 'package' with alias ('my_foo') for 'foo' and attaches all exported function names"
)
)
kbl(box_use_df) |>
kable_paper()
# load import module
box::use(
penguins/import
)
# use import
import$import()
# load import module
box::use(
penguins/read
)
# use import
raw_peng <- read$raw()
raw_peng |> head()
# load clean module
box::use(
penguins/clean
)
clean$prep() |> str()
box::use(
penguins/ggp2
)
ggp2
ls(ggp2)
ggp2$scatter()
extrafont::loadfonts()
fs::dir_tree(".", type = "dir", recurse = FALSE)
fs::dir_tree(".", type = "dir", recurse = TRUE)
fs::dir_tree(".", type = "dir", recurse = FALSE)
box::use(
penguins/ggp2
)
ggp2
fs::dir_tree("penguins")
fs::dir_tree("c")
build_shared_lib = function(object_names) {
# Change working directory so R finds the Makevars.
old_dir = setwd(box::file())
on.exit(setwd(old_dir))
exitcode = system2('R', c('CMD', 'SHLIB', paste0(object_names, '.c')))
stopifnot(exitcode == 0L)
}
build_shared_lib('hello')
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#")
options(width = 60)
library(cli)
library(sloop)
library(fs)
library(kableExtra)
fs::dir_tree("env")
box::use(a = env/a[f, g])
a
a$c$f()
a$g()
a$g()
a$c
ls(a$c)
a$c$f()
a$g
a$g()
a$f()
f_of_c1
f_of_c1 = a$c$f
f_of_c2 = get('f', parent.env(environment()))
stopifnot(identical(f_of_c1, f_of_c2))
f_of_c1
get('f', parent.env(environment()))
get('g', parent.env(environment()))
get('c', parent.env(environment()))
get('a', parent.env(environment()))
get('c', parent.env(environment()))
get('f', parent.env(environment()))
f_of_c1 = a$c$f
f_of_c1
a$g()
a$c$f()
get("a$f", parent.env(environment()))
get("f", parent.env(environment()))
parent.env(environment())
environment()
parent.env()
parent.env(environment())
environment()
parent.env(environment())
environment()
environment()
parent.env(environment())
f_of_c2 = get('a', parent.env(environment()))
f_of_c2 = get('f', parent.env(environment()))
stopifnot(identical(f_of_c1, f_of_c2))
f_of_c2 = get('f', parent.env(environment()))
f_of_c2
f_of_c2 = get("f", pos = parent.env(environment()))
f_of_c2
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#")
options(width = 60)
library(cli)
library(sloop)
library(fs)
library(kableExtra)
fs::dir_tree("env")
box::use(a = env/a[f, g])
a
ls(a$c)
a$c$f()
a$g()
a$f()
f_of_c1 = a$c$f
f_of_c1
environment()
parent.env(environment())
f_of_c2 = get("f", pos = parent.env(environment()))
f_of_c2
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#")
options(width = 60)
library(cli)
library(sloop)
library(fs)
library(kableExtra)
fs::dir_tree("box")
fs::dir_tree("box")
tidyverse_logo()
box::use(box/logo)
ls()
logo$print_logo()
logo$tidyverse_logo()
box::unload(logo)
box::use(box/logo)
ls(logo)
logo$print_logo()
box::use(box/logo)
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#")
options(width = 60)
library(cli)
library(sloop)
library(fs)
library(kableExtra)
fs::dir_tree(".", type = "dir", recurse = FALSE)
box_use_df <- data.frame(
check.names = FALSE,
`Inside box::use()` = c(
"pkg",
"p = pkg",
"pkg = pkg[foo, bar]",
"pkg[my_foo = foo, ...]"
),
Action = c(
"imports 'pkg', does not attach any function names",
"imports 'pkg' with alias ('p'), does not attach any function names",
"imports 'pkg' and attaches the function names 'pkg::foo()' and 'pkg::bar()'",
"imports 'pkg' with alias for 'foo' ('my_foo') and attaches all exported function names"
)
)
knitr::kable(box_use_df, format = "pipe")
# load import module
box::use(
penguins/import
)
# use import
import$import()
# load import module
box::use(
penguins/read
)
# use import
raw_peng <- read$raw()
raw_peng |> head()
# load clean module
box::use(
penguins/clean
)
clean$prep() |> str()
box::use(
penguins/ggp2
)
ggp2
fs::dir_tree("box")
box::use(tidy/plogo)
ls(plogo)
plogo$print_logo()
box::use(tidy/logo)
ls(logo)
box::use(tidy/logo)
logo
ls(logo)
logo$tidyverse_logo()
box::use(tidy/tidy_logo)
ls(tidy_logo)
tidy_logo$print_logo()
tidy_logo$tidy_logo()
identical(x = tidy_logo$print_logo(), y = tidy_logo$tidy_logo())
plogo
ggplot2::ggplot(mtcars, aes(mpg, hwy))
ggplot2::ggplot(mtcars, ggplot2::aes(mpg, hwy)) + ggplot2::geom_point()
mtcars
ggplot2::ggplot(mtcars, ggplot2::aes(mpg, disp)) + ggplot2::geom_point()
ggplot2::ggplot(mtcars, ggplot2::aes(disp, mpg)) + ggplot2::geom_point()
ggplot2::ggplot(mtcars, ggplot2::aes(disp, cyl)) + ggplot2::geom_point()
ggplot2::ggplot(mtcars, ggplot2::aes(disp, hp)) + ggplot2::geom_point()
ggplot2::ggplot(mtcars, ggplot2::aes(disp, mpg)) + ggplot2::geom_point()
ggplot2::ggplot(mtcars, ggplot2::aes(mpg, disp)) + ggplot2::geom_point()
box::use(ggp2/line)
box::use(ggp2/line)
line$graph()
box::use(ggp2/line)
box::unload(ggp2)
box::use(ggp2/line)
# box::unload(ggp2)
line$graph()
box::unload(ggp2)
box::use(ggp2/line)
# box::unload(ggp2)
line$graph()
# box::unload(ggp2)
ls(ggp2)
# box::unload(ggp2)
ls(line)
box::unload(ggp2)
box::unload(line)
box::use(ggp2/line)
# box::unload(line)
ls(line)
# box::unload(line)
line$graph()
box::unload(line)
box::use(ggp2/line)
ls(line)
line$ggplot(mtcars, line$aes(mpg, disp)) + line$geom_point
line$ggplot(mtcars, line$aes(mpg, disp)) + line$geom_point()
box::use(ggp2/gg)
gg$ggplot(mtcars, gg$aes(mpg, disp)) + gg$geom_point()
box::use(
ggp2/line
)
ls(line)
box::unload(line)
box::use(
ggp2/line
)
ls(line)
line$graph()
box::unload(line)
box::use(
ggp2/line
)
ls(line)
line$graph()
box::use(ggp2/gg)
box::unload(line)
box::use(
ggp2/line
)
ls(line)
line$graph()
box::use(ggp2/gg)
box::unload(line)
box::use(
ggp2/line
)
ls(line)
line$graph()
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#")
options(width = 60)
library(cli)
library(sloop)
library(fs)
library(kableExtra)
fs::dir_tree(".", type = "dir", recurse = FALSE)
box_use_df <- data.frame(
check.names = FALSE,
`Inside box::use()` = c(
"pkg",
"p = pkg",
"pkg = pkg[foo, bar]",
"pkg[my_foo = foo, ...]"
),
Action = c(
"imports 'pkg', does not attach any function names",
"imports 'pkg' with alias ('p'), does not attach any function names",
"imports 'pkg' and attaches the function names 'pkg::foo()' and 'pkg::bar()'",
"imports 'pkg' with alias for 'foo' ('my_foo') and attaches all exported function names"
)
)
knitr::kable(box_use_df, format = "pipe")
# load import module
box::use(
penguins/import
)
# use import
import$import()
# load import module
box::use(
penguins/read
)
# use import
raw_peng <- read$raw()
raw_peng |> head()
# load clean module
box::use(
penguins/clean
)
clean$prep() |> str()
box::use(
penguins/ggp2
)
ggp2
fs::dir_tree("tidy")
tidyverse_logo()
box::use(tidy/logo)
logo
ls(logo)
logo$tidyverse_logo()
box::use(tidy/plogo)
ls(plogo)
plogo$print_logo()
tidyverse_logo()
box::use(tidy/tidy_logo)
ls(tidy_logo)
identical(
x = tidy_logo$print_logo(),
y = tidy_logo$tidy_logo()
)
box::use(ggp2/gg)
gg$ggplot(mtcars, gg$aes(mpg, disp)) + gg$geom_point()
# box::unload(line)
box::use(
ggp2/line)
ls(line)
line$graph()
box::unload(line)
box::use(
ggp2/line)
ls(line)
line$graph()
setwd("~/projects/rbox/boxes/bio")
getwd()
setwd("~/projects/rbox")
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#")
options(width = 60)
library(cli)
library(sloop)
library(fs)
library(kableExtra)
library(extrafont)
extrafont::loadfonts()
ggplot2::ggplot(data = datasets::mtcars,
ggplot2::aes(mpg, disp)) +
ggplot2::geom_point()
ggplot2::mpg
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
error = TRUE,
comment = "#")
options(width = 60)
library(cli)
library(sloop)
library(fs)
library(kableExtra)
library(extrafont)
extrafont::loadfonts(quiet = TRUE)
library(showtext)
font_add("Arial", "/Library/Fonts/Arial.ttf")  # Use the actual file path
showtext_auto()
ggplot2::ggplot(data = ggplot2::mpg,
ggplot2::aes(hwy, displ)) +
ggplot2::geom_point()
ggplot2::ggplot(data = ggplot2::mpg,
ggplot2::aes(displ, hwy)) +
ggplot2::geom_point()
ggplot2::ggplot(data = ggplot2::mpg,
ggplot2::aes(x = displ, y = hwy, color = cyl)) +
ggplot2::geom_point()
ggplot2::ggplot(data = ggplot2::mpg,
ggplot2::aes(x = displ, y = hwy, color = trans)) +
ggplot2::geom_point()
box::use(ggp2/gg)
gg$ggplot(mpg,
gg$aes(x = displ, y = hwy)) +
gg$geom_point()
box::use(ggp2/gg)
gg$ggplot(gg$mpg,
gg$aes(x = displ, y = hwy)) +
gg$geom_point()
ggplot2::ggplot(data = ggplot2::mpg,
ggplot2::aes(x = displ, y = hwy)) +
ggplot2::geom_point()
styler:::style_active_file()
box::unload(line)
# box::unload(line)
box::use(
ggp2/line)
ls(line)
line$graph()
